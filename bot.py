import json
from telethon import TelegramClient, events
import asyncio
import random
import aiohttp
import logging
import pytz
from datetime import datetime
import os
import time
from telethon.tl.functions.account import UpdateProfileRequest

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
prefixes = ['.', '/', '!', '-']
logger = logging.getLogger(__name__)

SECRET_CODE = "unblockcmd"
unlocked_commands = {}
config_file = "config.json"

def load_config():
    if os.path.exists(config_file):
        with open(config_file, 'r') as f:
            return json.load(f)
    return {}

def save_config(config):
    with open(config_file, 'w') as f:
        json.dump(config, f)

config = load_config()

if "api_id" not in config or "api_hash" not in config:
    api_id = input("–í–≤–µ–¥–∏—Ç–µ api_id: ")
    api_hash = input("–í–≤–µ–¥–∏—Ç–µ api_hash: ")
    config["api_id"] = api_id
    config["api_hash"] = api_hash
    save_config(config)
else:
    api_id = config["api_id"]
    api_hash = config["api_hash"]

client = TelegramClient('session_name', int(api_id), api_hash)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ª–æ–ª–∏ —Ö–µ–Ω—Ç–∞—è
@client.on(events.NewMessage(pattern=f'[{"".join(prefixes)}]loli'))
async def lolicmd(event):
    if event.sender_id not in unlocked_commands or not unlocked_commands[event.sender_id]:
        await event.reply("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞! –í–≤–µ–¥–∏—Ç–µ /secret [–ø–∞—Ä–æ–ª—å] –¥–ª—è –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    await event.respond("—â–∞—â–∞—â–∞—â–∞")
    
    async with client.conversation("@ferganteusbot") as conv:
        try: 
            lh = await conv.send_message("/lh")
        except Exception as e:
            return await event.respond("–ò–Ω–≤–∞–ª–∏–¥, —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–π @Ferganteusbot")
        
        otvet = await conv.get_response()
        await lh.delete()
        
        if otvet.photo:
            await event.client.send_message(event.peer_id, message=otvet, reply_to=getattr(event, "reply_to_msg_id", None))
            await otvet.delete()
            await event.delete()

# –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥
@client.on(events.NewMessage(pattern='/secret'))
async def secret_handler(event):
    code = event.raw_text.split(" ")[1] if len(event.raw_text.split(" ")) > 1 else ""

    if code == SECRET_CODE:
        unlocked_commands[event.sender_id] = True
        await event.reply("–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —é–∑–∞—Ç—å .loli")
    else:
        await event.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
@client.on(events.NewMessage(pattern=f'[{"".join(prefixes)}]help'))
async def help_handler(event):
    help_text = """üîÆ UGCLAWS USERBOT Lite üîÆ

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ .help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ .anime [nsfw] - —Å–ª—É—á–∞–π–Ω–æ–µ –∞–Ω–∏–º–µ —Ñ–æ—Ç–æ
‚Ä¢ .im [—Ä–µ–∂–∏–º] - –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–º–∏—Ç–∞—Ü–∏—é (—Ä–µ–∂–∏–º—ã: typing/voice/video/game/mixed)
‚Ä¢ .imstop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–º–∏—Ç–∞—Ü–∏—é
‚Ä¢ .time - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –≤—Ä–µ–º—è –≤ –Ω–∏–∫–µ
‚Ä¢ .time_msk - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
‚Ä¢ .time_ekb - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—Å–∫–æ–µ –≤—Ä–µ–º—è 
‚Ä¢ .time_omsk - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–º—Å–∫–æ–µ –≤—Ä–µ–º—è
‚Ä¢ .time_samara - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∞–º–∞—Ä—Å–∫–æ–µ –≤—Ä–µ–º—è"""

    if event.sender_id in unlocked_commands and unlocked_commands[event.sender_id]:
        help_text += "\n‚Ä¢ .loli - —Å–ª—É—á–∞–π–Ω–∞—è –ª–æ–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è"

    await event.edit(help_text)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∏–º–µ —Ñ–æ—Ç–æ
@client.on(events.NewMessage(pattern=f'[{"".join(prefixes)}]anime'))
async def anime_handler(event):
    args = event.raw_text.split()
    if len(args) > 1 and args[1].lower() == "nsfw":
        url = "https://api.waifu.pics/nsfw/waifu"
        caption = "üéó –õ–æ–≤–∏ NSFW —Ñ–æ—Ç–æ!"
    else:
        url = "https://api.waifu.pics/sfw/waifu"
        caption = "üîÆ –°–ª—É—á–∞–π–Ω–æ–µ –∞–Ω–∏–º–µ —Ñ–æ—Ç–æ!"

    message = await event.respond("–≤–∞–Ω —Å–µ–∫..")

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    if "url" in data:
                        await event.client.send_file(event.chat_id, data["url"], caption=caption)
                        await message.delete()
                    else:
                        await message.edit("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ URL –≤ –æ—Ç–≤–µ—Ç–µ.")
                else:
                    await message.edit(f"–û—à–∏–±–∫–∞: {response.status}")
    except Exception as e:
        await message.edit(f"–û—à–∏–±–∫–∞: {e}")

# –ò–º–∏—Ç–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
@client.on(events.NewMessage(pattern=f'[{"".join(prefixes)}]im'))
async def im_handler(event):
    args = event.raw_text.split()[1] if len(event.raw_text.split()) > 1 else "mixed"
    mode = args.lower()
    chat_id = event.chat_id

    if chat_id in _imitation_active and _imitation_active[chat_id]:
        await event.edit("‚ùå –ò–º–∏—Ç–∞—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
        return

    _imitation_active[chat_id] = True
    _imitation_tasks[chat_id] = asyncio.create_task(_imitate(event.client, chat_id, mode))

    await event.edit(f"üé≠ –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞\n–†–µ–∂–∏–º: {mode}")

_imitation_tasks = {}
_imitation_active = {}

async def _imitate(client, chat_id, mode):
    try:
        while _imitation_active.get(chat_id, False):
            async with client.action(chat_id, mode):
                await asyncio.sleep(5)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–º–∏—Ç–∞—Ü–∏–∏: {e}")
        _imitation_active[chat_id] = False

@client.on(events.NewMessage(pattern=f'[{"".join(prefixes)}]imstop'))
async def imstop_handler(event):
    chat_id = event.chat_id
    _imitation_active[chat_id] = False
    if chat_id in _imitation_tasks:
        _imitation_tasks[chat_id].cancel()
        del _imitation_tasks[chat_id]

    await event.edit("üö´ –ò–º–∏—Ç–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

# –í—Ä–µ–º—è –≤ –Ω–∏–∫–µ
_time_running = False
_time_timezone = 'Europe/Moscow'

@client.on(events.NewMessage(pattern=f'[{"".join(prefixes)}]time'))
async def time_handler(event):
    global _time_running
    _time_running = not _time_running
    await event.edit("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω–∏–∫–µ " + ("–≤–∫–ª—é—á–µ–Ω–æ" if _time_running else "–≤—ã–∫–ª—é—á–µ–Ω–æ"))
    if _time_running:
        asyncio.create_task(update_nick(event.client))

async def update_nick(client):
    global _time_running, _time_timezone
    while _time_running:
        tz = pytz.timezone(_time_timezone)
        current_time = datetime.now(tz).strftime("%H:%M")

        me = await client.get_me()
        current_nick = me.first_name.split("|")[0].strip()
        new_nick = f"{current_nick} | {current_time}"

        try:
            await client(UpdateProfileRequest(first_name=new_nick))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∏–∫–∞: {e}")

        await asyncio.sleep(60)

@client.on(events.NewMessage(pattern=f'[{"".join(prefixes)}]time_msk'))
async def time_msk_handler(event):
    global _time_timezone
    _time_timezone = 'Europe/Moscow'
    await event.edit("–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: –ú–æ—Å–∫–≤–∞")

@client.on(events.NewMessage(pattern=f'[{"".join(prefixes)}]time_ekb'))
async def time_ekb_handler(event):
    global _time_timezone
    _time_timezone = 'Asia/Yekaterinburg'
    await event.edit("–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await client.start()
    print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    await client.run_until_disconnected()

if __name__ == '__main__':
    asyncio.run(main())
